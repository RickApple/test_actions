# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build (${{ matrix.os }} - ${{ matrix.c_compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            build_type: Release
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++
    outputs:
      matrix: ${{ toJson(matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Set build output dir
        id: strings
        shell: bash
        run: echo "build-output-dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.c_compiler }}
          path: ${{ steps.strings.outputs.build-output-dir }}

  test:
    name: Test (${{ matrix.os }} - ${{ matrix.c_compiler }})
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            build_type: Release
            c_compiler: cl
          - os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
          - os: ubuntu-latest
            build_type: Release
            c_compiler: clang
          - os: macos-latest
            build_type: Release
            c_compiler: clang

    steps:
      - uses: actions/checkout@v4

      - name: Set build output dir
        id: strings
        shell: bash
        run: echo "build-output-dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.c_compiler }}
          path: build

      - name: Make binary executable (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: chmod +x ${{ steps.strings.outputs.build-output-dir }}/my_program

      - name: Run Tests
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          ${{ steps.strings.outputs.build-output-dir }}${{ matrix.os == 'windows-latest' && '/Release' || '' }}/my_program${{ matrix.os == 'windows-latest' && '.exe' || '' }}
